
services:
    servic_db_1:
        image: postgres:15
        container_name: postgres_db1
        environment:
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            POSTGRES_DB: servic_db_1
        ports:
            - "5433:5432"  # External port 5433 maps to internal 5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U user -d servic_db_1"]
            interval: 5s
            timeout: 5s
            retries: 10

    servic_db_2:
        image: postgres:15
        container_name: postgres_db2
        environment:
            POSTGRES_USER: user
            POSTGRES_PASSWORD: password
            POSTGRES_DB: servic_db_2
        ports:
            - "5434:5432"  # External port 5434 maps to internal 5432
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U user -d servic_db_2"]
            interval: 5s
            timeout: 5s
            retries: 10
    
    redis:
        image: redis:latest
        container_name: redis
        ports:
            - "6379:6379"
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            timeout: 3s
            retries: 5


    zookeeper:
        image: wurstmeister/zookeeper:latest
        ports:
            - "2181:2181"

    kafka:
        image: wurstmeister/kafka:latest
        ports:
            - "9092:9092"
            - "9093:9093"
            - "9094:9094"
        expose:
            - "9094"
        environment:
            KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092,PLAINTEXT://host.docker.internal:9094
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT,PLAINTEXT:PLAINTEXT
            KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092,PLAINTEXT://0.0.0.0:9094
            KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_CREATE_TOPICS: "akm:1:1"
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

    service_1:
        build:
            context: ./access-key-management
            dockerfile: Dockerfile

        container_name: go_service_1
        ports:
            - "8081:8080"
        depends_on:
            servic_db_1:
                condition: service_healthy
            servic_db_2:
                condition: service_healthy
            kafka:
                condition: service_started
            redis:
                condition: service_healthy

        env_file:
        - ./access-key-management/.env

    service_2:
        build:
            context: ./token-verify-service
            dockerfile: Dockerfile

        container_name: go_service_2
        ports:
            - "8082:8000"
        depends_on:
            servic_db_1:
                condition: service_healthy
            servic_db_2:
                condition: service_healthy
            kafka:
                condition: service_started
            redis:
                condition: service_healthy

        env_file:
        - ./token-verify-service/.env
            

volumes:
    postgres_data: